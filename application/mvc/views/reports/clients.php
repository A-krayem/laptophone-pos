<?php
/*
 * @ https://EasyToYou.eu - IonCube v11 Decoder Online
 * @ PHP 5.6
 * @ Decoder version: 1.0.4
 * @ Release: 02/06/2020
 *
 * @ ZendGuard Decoder PHP 5.6
 */

// Decoded file for php version 53.
echo "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/png\" href=\"resources/favicon.png\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \n    <script src=\"libraries/jquery-3.1.1.min.js\" type=\"text/javascript\"></script>\n    <script src=\"application/mvc/views/reports/bootstrap-5.3.2-dist/popper.min.js\"></script>\n    <script src=\"application/mvc/views/reports/bootstrap-5.3.2-dist/js/bootstrap.min.js\" type=\"text/javascript\"></script>\n    <script src=\"application/mvc/views/reports/datatable/datatables.min.js\" type=\"text/javascript\"></script>\n    <script src=\"libraries/echarts-master/dist/echarts.min.js\" type=\"text/javascript\"></script>\n    <script src=\"application/mvc/views/reports/dataTables.bootstrap5.min.js\" type=\"text/javascript\"></script>\n    <script src=\"application/mvc/views/reports/daterangepicker-master/moment.min.js\" type=\"text/javascript\"></script>\n    <script src=\"application/mvc/views/reports/daterangepicker-master/daterangepicker.js\" type=\"text/javascript\"></script>\n    \n    \n    <link href=\"application/mvc/views/reports/bootstrap-5.3.2-dist/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\"/>\n    <link href=\"https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css\" rel=\"stylesheet\" type=\"text/css\"/>\n    <link href=\"application/mvc/views/reports/daterangepicker-master/daterangepicker.css\" rel=\"stylesheet\" type=\"text/css\"/>\n    \n    <title>Clients</title>\n    \n    <style type=\"text/css\">\n       .table tbody tr td {\n        padding: 5px !important;\n      }\n    </style>\n    \n    <script type=\"text/javascript\">\n        \n        var cursymb=\"\";\n        \n        var daily_interval=15;\n        \n    function drawDiagrams_pl() {\n        var _data=[];\n        \$.getJSON(\"?r=reportsacc&f=reportsacc_last_months&p0=15\", function (data) {\n            _data=data;\n        }).done(function () {\n\n            // Get the current option\n            var option = myChart.getOption();\n\n            // Update the xAxis data\n            var newData = _data.days;\n            option.xAxis[0].data = newData;\n\n            option.series[0].data = _data.total_sales;\n            option.series[1].data = _data.total_expenses;\n            option.series[2].data = _data.total_profits;\n            // Set the updated option back to the chart\n            myChart.setOption(option);\n        });\n    }\n    \n    function drawDiagrams_pl_daily(start_date,end_date) {\n        var _data=[];\n        \$.getJSON(\"?r=reportsacc&f=reportsacc_last_days&p0=\"+daily_interval+\"&p1=\"+start_date+\"&p2=\"+end_date, function (data) {\n            _data=data;\n        }).done(function () {\n            // Get the current option\n            var option = myChart_d.getOption();\n\n            // Update the xAxis data\n            var newData = _data.days;\n            option.xAxis[0].data = newData;\n\n            option.series[0].data = _data.total_sales;\n            option.series[1].data = _data.total_expenses;\n            option.series[2].data = _data.total_profits;\n            // Set the updated option back to the chart\n            myChart_d.setOption(option);\n        });\n    }\n    \n    function modal_example(){\n        var content =\n        '<div class=\"modal modal-xl\" id=\"sales_modal\" tabindex=\"-1\" aria-labelledby=\"sales_modalLabel\" aria-hidden=\"true\">\\n\\\n            <div class=\"modal-dialog\">\\n\\\n              <div class=\"modal-content\">\\n\\\n                <div class=\"modal-header\">\\n\\\n                  <h5 class=\"modal-title\" id=\"sales_modalLabel\">Modal Title</h5>\\n\\\n                  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\\n\\\n                </div>\\n\\\n                <div class=\"modal-body\">\\n\\\n                    <div class=\"row mt-2\">\\n\\\n                          <div class=\"col-lg-12\">\\n\\\n                          <table id=\"sales_modal_table\" class=\"table table-striped\" style=\"width:100%\">\\n\\\n                              <thead>\\n\\\n                                  <tr>\\n\\\n                                      <th>ID</th>\\n\\\n                                      <th>Name</th>\\n\\\n                                      <th>Email</th>\\n\\\n                                        <th>ID</th>\\n\\\n                                      <th>Name</th>\\n\\\n                                      <th>Email</th>\\n\\\n                                        <th>ID</th>\\n\\\n                                      <th>Name</th>\\n\\\n                                      <th>Email</th>\\n\\\n                                  </tr>\\n\\\n                              </thead>\\n\\\n                              <tbody>\\n\\\n                                  \\n\\\n                              </tbody>\\n\\\n                          </table>\\n\\\n                      </div>\\n\\\n                  </div>\\n\\\n              </div>\\n\\\n            </div>\\n\\\n          </div>';\n        \$(\"#sales_modal\").modal('hide');\n        \$(\"body\").append(content);\n        \$('#sales_modal').on('show.bs.modal', function (e) {\n            \n        });\n\n        \$('#sales_modal').on('shown.bs.modal', function (e) { \n            \n            \$('#sales_modal_table').DataTable({\n                 ajax: {\n                    url: \"?r=reportsacc&f=get_all_sales&p0=0&p1=0&p2=0\",\n                    type: 'POST',\n                    error:function(xhr,status,error) {\n                        \n                    },\n                },\n                \"pagingType\": \"full_numbers\", // Add pagination styles\n                \"scrollY\": \"300px\", // Set the maximum height for the body\n                \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]], // Define page length menu\n                \"order\": [[0, \"asc\"]], // Set default sorting column and order\n                \"language\": {\n                  \"search\": \"Search records:\",\n                  \"paginate\": {\n                    \"first\": \"First\",\n                    \"last\": \"Last\",\n                    \"next\": \"Next\",\n                    \"previous\": \"Previous\"\n                  }\n                }\n            });\n            \n            \n            \n            \n\n            \n            \n\n        });\n\n        \$('#sales_modal').on('hide.bs.modal', function (e) {\n            \$(\"#sales_modal\").remove();\n        });\n        \$('#sales_modal').modal('show');\n    }\n    \n    function drawDiagrams_top_products() {\n        var _data=[];\n        \$.getJSON(\"?r=reportsacc&f=reportsacc_top_products&p0=15&p1=today\", function (data) {\n            _data=data;\n        }).done(function () {\n            \n            var dim=[];\n  \n            for(var i=0;i<_data.items.length;i++){\n                dim.push([_data.items[i][0], parseFloat(_data.items[i][1])]);\n            }\n            \n             \n\n            var updatedData = {\n                source: dim\n            };\n            \n            myChart_section2.setOption({\n              dataset: {\n                source: updatedData.source\n              }\n            });\n        });\n    }\n    \n    function drawDiagrams_clients_created_date(start_date,end_date) {\n        var _data=[];\n        \$.getJSON(\"?r=reportsacc&f=reportsacc_by_clients_created_date&p0=15&p1=\"+start_date+\"&p2=\"+end_date, function (data) {\n            _data=data;\n        }).done(function () {\n            \n            var dim=[];\n  \n            for(var i=0;i<_data.items.length;i++){\n                dim.push([_data.items[i][0], parseFloat(_data.items[i][1])]);\n            }\n            \n             \n\n            var updatedData = {\n                source: dim\n            };\n            \n            myChart_section3.setOption({\n              dataset: {\n                source: updatedData.source\n              }\n            });\n        });\n    }\n    \n    \n    function pepare_date_range(id){\n        \$('#'+id).daterangepicker({\n            ranges: {\n                'Today': [moment(), moment()],\n                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n                'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n                'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n                'This Month': [moment().startOf('month'), moment().endOf('month')],\n                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n             },\n            \"alwaysShowCalendars\": true,\n            dateLimit:{month:6},\n            startDate: moment().subtract(daily_interval-1, 'days'),\n            endDate: moment(),\n            locale: {\n                format: 'YYYY-MM-DD'\n            },\n            \"opens\": \"left\"\n        }, function(start, end, label) {\n            drawDiagrams_clients_created_date(start.format('YYYY-MM-DD'),end.format('YYYY-MM-DD'));\n          //console.log('New date range selected: ' + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD') + ' (predefined range: ' + label + ')');\n        });\n    }\n    \n    \$(document).ready(function () {\n        \n        pepare_date_range(\"client_daterange\");\n            \n        \n        //drawDiagrams_pl_daily('-1','-1');\n        //drawDiagrams_pl();\n        \n        //drawDiagrams_top_products();\n        drawDiagrams_clients_created_date('-1','-1');\n \n        window.addEventListener('resize', handleResize);\n    });\n    \n    function handleResize() {\n            // Resize the chart when the window is resized\n            //myChart.resize();\n            //myChart_d.resize();\n        }\n    </script>\n    \n    \n</head>\n<body>\n\n    ";
require_once "application/mvc/views/reports/menu.php";
echo "    \n    <div class=\"container-fluid\">\n        \n        <div class=\"row mt-2\" style=\"display: none\">\n            <div class=\"col-md-12\">\n                <div class=\"card bg-white text-white\">\n                    <div class=\"card-header text-dark bg-success-subtle\">\n                        <div class=\"row mt-0\">\n                            <div class=\"col-lg-9 col-md-8 col-sm-6\">\n                                Sales, Expenses and Profits - Daily \n                            </div>\n                            <div class=\"col-lg-3 col-md-4 col-sm-6\">\n                                <input readonly type=\"text\" id=\"daily_profits\" value=\"\" class=\"form-control form-control-sm\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <div id=\"section_4\" style=\"width: 100%;height:300px;\"></div>\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n        \n        <div class=\"row mt-2\" style=\"display: none\">\n            <div class=\"col-md-12\">\n                <div class=\"card bg-white text-white\">\n                    <div class=\"card-header text-dark bg-success-subtle\">\n                        Sales, Expenses and Profits - Monthly\n                    </div>\n                    <div class=\"card-body\">\n                        <div id=\"section_1\" style=\"width: 100%;height:300px;\"></div>\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n        \n        <div class=\"row mt-2 mb-5\">\n            <div class=\"col-md-6\" style=\"display: none\">\n                <div class=\"card bg-white text-white\">\n                    <div class=\"card-header text-dark bg-success-subtle\">\n                        Top-performing products\n                    </div>\n                    <div class=\"card-body\">\n                        <div id=\"section_2\" style=\"width: 100%;height:300px;\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-12\">\n                <div class=\"card bg-white text-white\">\n                    <div class=\"card-header text-dark bg-success-subtle\">\n                        <div class=\"row mt-0\">\n                            <div class=\"col-lg-9 col-md-8 col-sm-6\">\n                                Clients by creation date\n                            </div>\n                            <div class=\"col-lg-3 col-md-4 col-sm-6\">\n                                <input readonly type=\"text\" id=\"client_daterange\" value=\"\" class=\"form-control form-control-sm\" />\n                            </div>\n                        </div>  \n                    </div>\n                    <div class=\"card-body\">\n                        <div id=\"section_3\" style=\"width: 100%;height:300px;\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        \n        \n    </div>\n    \n    \n    <script type=\"text/javascript\">\n        \n       /* Daily */ \n        var myChart_d = echarts.init(document.getElementById('section_4'));\n    var app_d = {};\n          const posList_d = [\n      'left',\n      'right',\n      'top',\n      'bottom',\n      'inside',\n      'insideTop',\n      'insideLeft',\n      'insideRight',\n      'insideBottom',\n      'insideTopLeft',\n      'insideTopRight',\n      'insideBottomLeft',\n      'insideBottomRight'\n    ];\n    app_d.configParameters = {\n      rotate: {\n        min: -90,\n        max: 90\n      },\n      align: {\n        options: {\n          left: 'left',\n          center: 'center',\n          right: 'right'\n        }\n      },\n      verticalAlign: {\n        options: {\n          top: 'top',\n          middle: 'middle',\n          bottom: 'bottom'\n        }\n      },\n      position: {\n        options: posList_d.reduce(function (map, pos) {\n          map[pos] = pos;\n          return map;\n        }, {})\n      },\n      distance: {\n        min: 0,\n        max: 100\n      }\n    };\n    app_d.config = {\n      rotate: 90,\n      align: 'left',\n      verticalAlign: 'middle',\n      position: 'insideBottom',\n      distance: 15,\n      onChange: function () {\n        const labelOption_d = {\n          rotate: app_d.config.rotate,\n          align: app_d.config.align,\n          verticalAlign: app_d.config.verticalAlign,\n          position: app_d.config.position,\n          distance: app_d.config.distance\n        };\n        myChart_d.setOption({\n          series: [\n            {\n              label: labelOption_d,\n            },\n            {\n              label: labelOption_d\n            },\n            {\n              label: labelOption_d\n            }\n          ]\n        });\n      }\n    };\n    const labelOption_d = {\n      show: true,\n      formatter: function (params) {\n            // Use the formatter function to customize the display format\n            \n            return params.value !== 0 ? params.value.toLocaleString()+' '+cursymb : '';\n            \n           // return params.value.toLocaleString(); // Format the number using toLocaleString()\n        },\n      position: app_d.config.position,\n      distance: app_d.config.distance,\n      align: app_d.config.align,\n      verticalAlign: app_d.config.verticalAlign,\n      rotate: app_d.config.rotate,\n      //formatter: '{c}  {name|{a}}',\n      rich: {\n        name: {}\n      },\n      textStyle: {\n        color: 'black', // Label text color\n        fontSize: 12,   // Label font size\n        // You can add other font properties as needed\n        }\n    };\n    option_d = {\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        }\n      },\n      legend: {\n        data: ['Sales', 'Expenses', 'Profits']\n      },\n      toolbox: {\n        show: true,\n        orient: 'vertical',\n        left: 'right',\n        top: 'center',\n        feature: {\n          mark: { show: true },\n          dataView: { show: false, readOnly: false },\n          magicType: { show: true, type: ['line', 'bar'] },\n          restore: { show: false },\n          saveAsImage: { show: false }\n        }\n      },\n          grid: {\n      left: '50px',   // Adjust left margin\n      right: '50px',  // Adjust right margin\n      top: '30px',    // Adjust top margin\n      bottom: '25px'  // Adjust bottom margin\n    },\n      xAxis: [\n        {\n          type: 'category',\n          axisTick: { show: false },\n          data: []\n        }\n      ],\n      yAxis: [\n        {\n          type: 'value', \n          axisLabel: {\n                formatter: function (value) {\n                    // Format the Y-axis labels to display thousands as \"k\"\n                    return (value / 1000).toFixed(0) + 'k';\n                }\n            }\n       }\n      ],\n      series: [\n        {\n          name: 'Sales',\n          type: 'bar',\n          barGap: 0,\n          label: labelOption_d,\n          emphasis: {\n            focus: 'series'\n          },\n          data: []\n        },\n        {\n          name: 'Expenses',\n          type: 'bar',\n          label: labelOption_d,\n          emphasis: {\n            focus: 'series'\n          },\n          itemStyle: {color: '#eea236'},\n          data: [],\n        },\n        {\n          name: 'Profits',\n          type: 'bar',\n          label: labelOption_d,\n          emphasis: {\n            focus: 'series'\n          },\n          itemStyle: {color: '#20c997'},\n          data: []\n        },\n\n      ],\n    };\n    \n    myChart_d.on('click', function (params) {\n        // params.dataIndex contains the index of the clicked bar\n        var clickedBarIndex = params.dataIndex;\n\n        // Call your custom function with the index or any other relevant information\n        //console.log('params:', params);\n        modal_example();\n    });\n\n        \n    myChart_d.setOption(option_d); \n    /* End Daily */\n    \n    var myChart = echarts.init(document.getElementById('section_1'));\n    var app = {};\n          const posList = [\n      'left',\n      'right',\n      'top',\n      'bottom',\n      'inside',\n      'insideTop',\n      'insideLeft',\n      'insideRight',\n      'insideBottom',\n      'insideTopLeft',\n      'insideTopRight',\n      'insideBottomLeft',\n      'insideBottomRight'\n    ];\n    app.configParameters = {\n      rotate: {\n        min: -90,\n        max: 90\n      },\n      align: {\n        options: {\n          left: 'left',\n          center: 'center',\n          right: 'right'\n        }\n      },\n      verticalAlign: {\n        options: {\n          top: 'top',\n          middle: 'middle',\n          bottom: 'bottom'\n        }\n      },\n      position: {\n        options: posList.reduce(function (map, pos) {\n          map[pos] = pos;\n          return map;\n        }, {})\n      },\n      distance: {\n        min: 0,\n        max: 100\n      }\n    };\n    app.config = {\n      rotate: 90,\n      align: 'left',\n      verticalAlign: 'middle',\n      position: 'insideBottom',\n      distance: 15,\n      onChange: function () {\n        const labelOption = {\n          rotate: app.config.rotate,\n          align: app.config.align,\n          verticalAlign: app.config.verticalAlign,\n          position: app.config.position,\n          distance: app.config.distance\n        };\n        myChart.setOption({\n          series: [\n            {\n              label: labelOption,\n            },\n            {\n              label: labelOption\n            },\n            {\n              label: labelOption\n            }\n          ]\n        });\n      }\n    };\n    const labelOption = {\n      show: true,\n      formatter: function (params) {\n            // Use the formatter function to customize the display format\n            \n            return params.value !== 0 ? params.value.toLocaleString()+' '+cursymb : '';\n            \n           // return params.value.toLocaleString(); // Format the number using toLocaleString()\n        },\n      position: app.config.position,\n      distance: app.config.distance,\n      align: app.config.align,\n      verticalAlign: app.config.verticalAlign,\n      rotate: app.config.rotate,\n      //formatter: '{c}  {name|{a}}',\n      rich: {\n        name: {}\n      },\n      textStyle: {\n        color: 'black', // Label text color\n        fontSize: 12,   // Label font size\n        // You can add other font properties as needed\n        }\n    };\n    option = {\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        }\n      },\n      legend: {\n        data: ['Sales', 'Expenses', 'Profits']\n      },\n      toolbox: {\n        show: true,\n        orient: 'vertical',\n        left: 'right',\n        top: 'center',\n        feature: {\n          mark: { show: true },\n          dataView: { show: false, readOnly: false },\n          magicType: { show: true, type: ['line', 'bar'] },\n          restore: { show: false },\n          saveAsImage: { show: false }\n        }\n      },\n          grid: {\n      left: '50px',   // Adjust left margin\n      right: '50px',  // Adjust right margin\n      top: '30px',    // Adjust top margin\n      bottom: '25px'  // Adjust bottom margin\n    },\n      xAxis: [\n        {\n          type: 'category',\n          axisTick: { show: false },\n          data: []\n        }\n      ],\n      yAxis: [\n        {\n          type: 'value', \n          axisLabel: {\n                formatter: function (value) {\n                    // Format the Y-axis labels to display thousands as \"k\"\n                    return (value / 1000).toFixed(0) + 'k';\n                }\n            }\n       }\n      ],\n      series: [\n        {\n          name: 'Sales',\n          type: 'bar',\n          barGap: 0,\n          label: labelOption,\n          emphasis: {\n            focus: 'series'\n          },\n          data: []\n        },\n        {\n          name: 'Expenses',\n          type: 'bar',\n          label: labelOption,\n          emphasis: {\n            focus: 'series'\n          },\n          itemStyle: {color: '#eea236'},\n          data: [],\n        },\n        {\n          name: 'Profits',\n          type: 'bar',\n          label: labelOption,\n          emphasis: {\n            focus: 'series'\n          },\n          itemStyle: {color: '#20c997'},\n          data: []\n        },\n\n      ],\n    };\n    \n    myChart.on('click', function (params) {\n        // params.dataIndex contains the index of the clicked bar\n        var clickedBarIndex = params.dataIndex;\n\n        // Call your custom function with the index or any other relevant information\n        //console.log('params:', params);\n        //modal_example();\n    });\n\n        \n    myChart.setOption(option); \n    \n    \n    \n    var myChart_section2 = echarts.init(document.getElementById('section_2'));\n    option_s2 = {\n    dataset: [\n      {\n        dimensions: ['name', 'score'],\n        source: []\n      },\n      {\n        transform: {\n          type: 'sort',\n          config: { dimension: 'score', order: 'desc' }\n        }\n      }\n    ],\n    grid: {\n      left: '40px',   // Adjust left margin\n      right: '40px',  // Adjust right margin\n      top: '10px',    // Adjust top margin\n    },\n    xAxis: {\n      type: 'category',\n      axisLabel: { interval: 0, rotate: 30 }\n    },\n    yAxis: {\n        axisLabel: {\n                formatter: function (value) {\n                    // Format the Y-axis labels to display thousands as \"k\"\n                    if(value>1000){\n                        return (value / 1000).toFixed(0) + 'k';\n                    }else{\n                        return value;\n                    }\n                    \n                }\n            }\n    },\n    series: {\n      type: 'bar',\n      encode: { x: 'name', y: 'score' },\n      datasetIndex: 1,\n      itemStyle: {\n        // Use gradient color for the bar\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          { offset: 0, color: '#198754' },    // Start color\n          { offset: 1, color: '#20c997' }     // End color\n        ])\n      }\n    },\n    tooltip: {\n      trigger: 'axis', // Show tooltip on hover over bars\n      axisPointer: {\n        type: 'shadow' // Display the tooltip shadow\n      }\n    },\n  };\n  \n  myChart_section2.setOption(option_s2); \n  \n  \n  \n  var myChart_section3 = echarts.init(document.getElementById('section_3'));\n    option_s3 = {\n    dataset: [\n      {\n        dimensions: ['name', 'score'],\n        source: []\n      },\n      {\n        transform: {\n          type: 'sort',\n          config: { dimension: 'score', order: 'desc' }\n        }\n      }\n    ],\n    grid: {\n      left: '40px',   // Adjust left margin\n      right: '40px',  // Adjust right margin\n      top: '10px',    // Adjust top margin\n    },\n    xAxis: {\n      type: 'category',\n      axisLabel: { interval: 0, rotate: 30 }\n    },\n    yAxis: {\n        axisLabel: {\n                formatter: function (value) {\n                    // Format the Y-axis labels to display thousands as \"k\"\n                    if(value>1000){\n                        return (value / 1000).toFixed(0) + 'k';\n                    }else{\n                        return value;\n                    }\n                    \n                }\n            }\n    },\n    series: {\n      type: 'bar',\n      encode: { x: 'name', y: 'score' },\n      datasetIndex: 1,\n      itemStyle: {\n        // Use gradient color for the bar\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          { offset: 0, color: '#0d6efd' },    // Start color\n          { offset: 1, color: '#6ea8fe' }     // End color\n        ])\n      }\n    },\n    tooltip: {\n      trigger: 'axis', // Show tooltip on hover over bars\n      axisPointer: {\n        type: 'shadow' // Display the tooltip shadow\n      }\n    },\n  };\n  \n  myChart_section3.setOption(option_s3); \n    \n    </script>\n\n</body>\n</html>\n";

?>